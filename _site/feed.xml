<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-19T21:56:01+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Log Archive</title><subtitle>개발관련 글을 기록하는 곳입니다.</subtitle><author><name>Dalaran</name></author><entry><title type="html">Next.js .env undefined error (with Firebase) 기록</title><link href="http://localhost:4000/error/env-error/" rel="alternate" type="text/html" title="Next.js .env undefined error (with Firebase) 기록" /><published>2022-09-19T00:00:00+09:00</published><updated>2022-09-19T00:00:00+09:00</updated><id>http://localhost:4000/error/env%20error</id><content type="html" xml:base="http://localhost:4000/error/env-error/"><![CDATA[<p>최근 개인 프로젝트로 진행했던 프로젝트에서 Firebase와 openApi와 관련된 에러가 발생했다. 기존에 구동을 확인했던 코드에 문제가 생긴 것이었다. 결론부터 말하자면 이는 env와 관련된 에러였다. 때문에 발생한 문제와 해결방법을 순차적으로 기록한 후 결론을 정리하려한다.</p>

<h1 id="1-env의-부재">1. env의 부재</h1>
<p>문제가 발생한 부분은 Giphy openApi와 사용자의 클립 기록을 firebase를 통해 기록하는 부분이었다. 발생 원인은 api와 firebase의 key 값을 환경변수로 관리하였는데 이를 읽지 못해 발생한 문제였다. 나는 과거 local에 있는 프로젝트 폴더가 꼬여서 삭제하고 git에서 다시 받은적이 있다. 문제는 gitignore 파일에 .env가 포함되어 있기 때문에 git에는 .env가 존재하지 않는 것이었다. 때문에 다시 .env 파일을 생성한 후 환경변수를 설정해 주었다.
<br /></p>

<h1 id="2-firebase-경로-문제">2. Firebase 경로 문제</h1>
<p>위의 방법으로 환경변수를 재 설정하니 Giphy api는 다시 정상적으로 작동하였다. 하지만 문제는 유저 기록을 남기는 코드 중 firebase 관련 코드였다. 원인을 알 수 없는 400(Bad request)에러가 계속 발생하였기 때문이다. 
<img with="500px" src="/assets/images/2022-09-19/env,경로문제.png" href="env,경로문제" /></p>

<p>해당 문제의 원인은 import 경로에 있었다. 나의 기존코드는 아래와 같았다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">getFirestore</span><span class="p">,</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">addDoc</span><span class="p">,</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">getDocs</span><span class="p">,</span> <span class="nx">getDoc</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/firestore/lite</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">firebaseApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../pages/_app</span><span class="dl">"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>하지만 에러확인 후 docs에서 확인한 import 경로는 아래와 같았다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="p">{</span> <span class="nx">getFirestore</span><span class="p">,</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">addDoc</span><span class="p">,</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">getDocs</span><span class="p">,</span> <span class="nx">getDoc</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">firebase/firestore</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">firebaseApp</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../../../pages/_app</span><span class="dl">"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>정말 간단한 문제였다. 하지만 경로 보다는 해당 함수 사용에 문제가 있는 것으로 판단했었기 때문에 (addDoc, etc…) 찾아내기까지 꽤 시간이 걸렸다. 버전이 수정될 떄 경로또한 수정될 수 있기 때문에 해당 부분 먼저 확인하고 넘어간다면 좀 더 빠른 문제해결이 가능하지 않았을까 생각한다.
<br /></p>

<h1 id="3-firebase-env와-관련된-offline-문제">3. Firebase .env와 관련된 offline 문제</h1>
<p>firebase의 import 경로를 수정하고 보니 이번에는 offline 관련 문제가 발생하였다. (가장 아래 error)
<img with="500px" src="/assets/images/2022-09-19/offline 문제.png" href="offline 문제" />
해당문제에 대해 구글링을 하던 중 Stack Overflow에서 같은 문제를 발견하였다. 해당 답글에는 firebase key 값이 잘못됐을 경우 해당 에러가 발생할 수 있다 적혀있었다. 하지만 firebase에서 확인한 키값과 환경변수로 적용한 key 값은 같은 값이었다.</p>

<p>좌절 한 후 서칭을 더 하다보니 Stack Overflow에서 재밌는 글을 발견하였다. 자신도 같은 오류를 격었는데 알고보니 firebaseConfig의 값이 undefined로 읽히고 있었다는 것이었다. 이 글을 보고 나는 바로 console.log로 확은을 해 보았다.</p>

<p><strong>나의 firebaseConfig</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">firebaseConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">apiKey</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_APIKEY</span><span class="p">,</span>
  <span class="na">authDomain</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_AUTHDOMAIN</span><span class="p">,</span>
  <span class="na">projectId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_PROJECTID</span><span class="p">,</span>
  <span class="na">storageBucket</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_STORAGEBUCKET</span><span class="p">,</span>
  <span class="na">messagingSenderId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_MESSAGINGSENDERID</span><span class="p">,</span>
  <span class="na">appId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_APPID</span><span class="p">,</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>나의 .env</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nx">NEXT_PUBLIC_GIPHY_KEY</span><span class="o">=</span><span class="nx">생략</span>
<span class="nx">NEXT_PUBLIC_FIREBASE_APIKEY</span><span class="o">=</span><span class="nx">생략</span>
<span class="nx">NEXT_PUBLIC_FIREBASE_AUTHDOMAIN</span><span class="o">=</span><span class="nx">생략</span>
<span class="nx">NEXT_PUBLIC_FIREBASE_PROJECTID</span><span class="o">=</span><span class="nx">생략</span>
<span class="nx">NEXT_PUBLIC_FIREBASE_STORAGEBUCKET</span><span class="o">=</span><span class="nx">생략</span>
<span class="nx">NEXT_PUBLIC_FIREBASE_MESSAGINGSENDERID</span><span class="o">=</span><span class="nx">생략</span>
<span class="nx">NEXT_PUBLIC_FIREBASE_APPID</span><span class="o">=</span><span class="nx">생략</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>오류</strong>
<img with="500px" src="/assets/images/2022-09-19/env undefine 문제.png" href="env undefine 문제" /></p>

<p>확인한 결과 firebaseConfig가 undefined로 읽히고 있었다. 이러니 당연히 에러가 나지.. 하지만 문제는 내 env 설정에 딱히 문제가 없었다는 것이었다. 때문에 ‘Next.js env undefined’로 검색한 결과 Stack Overflow에서 같은 문제를 발견할 수 있었다. 해당 글의 답글에는 env 설정 순서에 대한 답글이 있었다.</p>

<ol>
  <li>env 파일을 만들어라.</li>
  <li>모든 환경변수에 NEXT_PUBLIC prefix를 추가해라</li>
  <li>prefix process.env와 함께 사용해라(ex. process.env.NEXT_PUBLIC_TEST)</li>
  <li>서버 구동을 멈추고 재구동 하라.</li>
</ol>

<p>해당글에서 내가 빼먹은 것이라고는 서버 재구동 말고는 없었다. 서버 구동을 멈추고 yarn dev를 한 결과 환경변수가 재대로 읽히면서 오류가 해결되는 것을 확인할 수 있었다.
<br /></p>

<h1 id="4-결국-env-문제였다">4. 결국 env 문제였다.</h1>
<p>위의 2번을 확인하면 나는 Firebase의 400에러를 해결하기 위해 import 경로를 수정하였다. 하지만 3번까지 해결한 후 다시 경로를 기존 경로로 변경해보니 별 문제 없이 구동되었다. doc를 찾아보니 기존 경로는 firebase lite 버전으로 가벼운 독립형 REST 전용 firebase sdk 였다. 결국 근본적인 문제해결과는 상관없는 문제였던 것이다. 
<br /></p>

<h1 id="결론">결론</h1>
<p>결과적으로 이번 에러의 문제는 전적으로 환경변수의 문제였다. 나는 giphy openApi를 수정하기 위해 해당 키값만 환경변수로 추가하고 서버를 실행하였다. 이후 서버를 실행한 상태에서 firebase 키값을 환경변수에 추가했기 때문에 이를 읽지 못하고 undefined가 나오는 문제가 발생한 것이다. 즉, env를 설정할때는 서버를 끈 상태에서 설정하는것이 좋으며, 혹 서버를 연 상태로 추가했을 경우 반드시 재구동 후 테스트하는 습관을 가져야 할 것 같다.</p>

<h1 id="요약">요약</h1>
<ol>
  <li>.env 파일은 보통 git에 안올라가게 설정한다.(gitignore) 때문에 git에서 다시 받을 때는 백업 후 추가하는 과정이 필요하다.</li>
  <li>서버를 구동시키고 env에 환경변수를 추가할 경우 이를 읽지 못한다. 때문에 서버를 재구동 하거나 끈 상태에서 env를 설정하도록 하자.</li>
</ol>]]></content><author><name>Dalaran</name></author><category term="error" /><category term="환경변수" /><category term="env" /><category term="undefined" /><summary type="html"><![CDATA[Next.js에서 환경변수를 설정했지만 값이 undefined로 읽어지지 않았다. 이에대한 해결법을 기록한다.]]></summary></entry><entry><title type="html">브라우저의 동작 과정과 Virtual Dom</title><link href="http://localhost:4000/react/virtual-dom/" rel="alternate" type="text/html" title="브라우저의 동작 과정과 Virtual Dom" /><published>2022-05-23T00:00:00+09:00</published><updated>2022-05-23T00:00:00+09:00</updated><id>http://localhost:4000/react/virtual%20dom</id><content type="html" xml:base="http://localhost:4000/react/virtual-dom/"><![CDATA[<p>React는 여러 가지 특징을 가지고 있다. 오늘은 그 특징 중 하나인 VDOM(Virtual DOM)에 관해 포스팅하려 한다. VDOM을 알기 위해서는 브라우저의 동작 과정을 알아야 할 필요가 있기 때문에 이에 대해 간단하게 알아보고 VDOM으로 넘어가 보려 한다.</p>

<h1 id="browser의-동작-과정">Browser의 동작 과정</h1>

<p><br /></p>

<h2 id="렌더링-엔진">렌더링 엔진</h2>
<p>요청 받은 내용을 브라우저 화면에 표시한다. 기본적으로 렌더링 엔진은 HTML 및 XML 문서와 이미지를 표시할 수 있다. 각 브라우저는 서로다른 렌더링 엔진을 사용한다.</p>
<ul>
  <li>Internet Explorer : Trident</li>
  <li>Firefox : Gecko</li>
  <li>Safari, Chrome : Webkit</li>
</ul>

<p><br /></p>

<h2 id="렌더링-과정">렌더링 과정</h2>

<p><img src="/assets/images/2022-05-23/browserWorkflow.png" alt="" /></p>

<ul>
  <li>파싱(parsing) : 코드를 브라우저가 이해할 수 있도록 변환하는 것</li>
</ul>

<h3 id="1-html-파싱-dom-트리-생성">1. HTML 파싱, DOM 트리 생성</h3>
<p>브라우저가 서버에서 HTML 문서를 받으면 렌더링 엔진이 이를 파싱하고 Node로 이루어진 DOM 트리를 생성한다.</p>

<h3 id="2-css-파싱-렌더트리-생성">2. CSS 파싱, 렌더트리 생성</h3>
<p>CSS를 파싱하여 CSSOM(CSS Object Model)을 생성하고 해당 스타일 정보를 이용하여 렌더트리를 생성한다.</p>

<h3 id="3-layoutreflow">3. Layout(reflow)</h3>
<p>각 노드들에게 좌표를 전달하여 화면상 어디에 배치될 지 결정된다.</p>

<h3 id="4-painting">4. Painting</h3>
<p>각 노드를 거치면서 paint() 메소드를 호출한다.</p>

<p><br /></p>

<h1 id="vdomvirtual-dom">VDOM(Virtual DOM)</h1>

<p><br /></p>

<h2 id="vdom-이란">VDOM 이란?</h2>
<p>VDOM은 가상의 DOM을 메모리에 저장하고 ReactDOM과 같은 라이브러리에 의해 실제 DOM과 동기화하는 프로그래밍 개념이다.</p>

<p>만약 화면을 구성하는 요소가 변화했을 때, 이를 바로 DOM에 동기화하는 것이 아니라 메모리에 저장된 VDOM에 먼저 적용을 시킨다. 그 후 실제 DOM과 비교해 변화한 부분을 확인 하고 해당 부분만 렌더링시켜 DOM에 적용시키는 것이다.</p>

<h2 id="vdom을-사용하는-이유">VDOM을 사용하는 이유</h2>
<p>VDOM을 사용하는 이유로는 렌더링 최적화에 있다. 근래에는 MPA(Multi Page Application)보다 SPA(Single Page Application)로 많이 개발한다. SPA는 필요 리소스를 한 번에 다운로드 받은 후 새로운 페이지를 요청 할 시 변경되는 부분만 렌더링하는 특징이 있다. 이러한 과정에서 필연적으로 DOM조작이 많이 이루어 지게 된다. VDOM은 이러한 과정을 먼저 처리하고 최종적인 결과를 DOM에 전달함으로써 연산량을 줄여주고 성능을 개선해 준다.</p>

<p>즉, VDOM은 여러 번 해야하는 DOM 작업을 내부적으로 연산하여 딱 1번만 하게 해주는 것이다.</p>

<h1 id="요약">요약</h1>
<p>VDOM은 SPA로 넘어가는 과정에서 여러 번 발생되는 DOM 작업을 메모리에 저장된 가상 DOM에서 연산을 미리 함으로서 DOM조작을 한번만 하게 도와준다.</p>

<p>참고:
https://velopert.com/3236
https://woong-jae.com/web/210821-how-does-browser-work
https://jongminfire.dev/spa-single-page-application-%EB%9E%80</p>]]></content><author><name>Dalaran</name></author><category term="react" /><category term="React" /><category term="Browser-Workflow" /><category term="Virtual DOM" /><category term="VDOM" /><summary type="html"><![CDATA[브라우저의 동작원리를 알아보고 가상 Dom이 무엇을 하는지 알아보자.]]></summary></entry><entry><title type="html">var로 알아보는 Hoisting, TDZ</title><link href="http://localhost:4000/javascript/var-hosting-TDZ/" rel="alternate" type="text/html" title="var로 알아보는 Hoisting, TDZ" /><published>2022-05-17T00:00:00+09:00</published><updated>2022-05-17T00:00:00+09:00</updated><id>http://localhost:4000/javascript/var%20hosting%20TDZ</id><content type="html" xml:base="http://localhost:4000/javascript/var-hosting-TDZ/"><![CDATA[<h1 id="var">Var</h1>
<p>var는 변수(var, let, const)들 중 하나로 초기 자바스크립트에서 많이 사용되던 변수이다. 요즘에는 거의 사용하지 않지만 과거의 프로젝트일 경우 충분히 만날 수 있으며, let과 const와는 다른 특성이 있기 때문에 var를 let, const로 변환하는 과정에서 예상치 못한 오류를 만날 수 있다.</p>

<p><br /></p>

<h2 id="블록-스코프">블록 스코프</h2>
<p>var는 블록 스코프가 없다. 때문에 var로 선언한 변수의 스코프는 함수 스코프 이거나 전역 스코프이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">var</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// "var"</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">let</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="c1">// "let"</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// a is not defined</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위의 코드를 보면 let은 if문 안에서만 접근이 가능하다. if문 밖에서 접근하면 오류가 발생하는 것을 볼 수 있다. 하지만 var는 블록 스코프가 없기때문에 해당 코드에서는 전역 스코프를 갖게되고 if문 밖에서도 접근에 가능해지는 것이다. 이는 for 문에서도 같게 동작한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 10</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>하지만 함수안에 선언된 var라면 함수 스코프를 갖게 때문에 함수 밖에서는 접근이 불가능하다. (안에서는 위의 조건(if, for)을 같게 적용받는다. )</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">testVar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">block</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Var</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">block</span><span class="p">);</span> <span class="c1">// "Var"</span>
<span class="p">}</span>

<span class="nx">testVar</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">block</span><span class="p">);</span> <span class="c1">// block is not defined</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h2 id="중복-선언">중복 선언</h2>
<p>만약 cat 이라는 이름의 변수를 let으로 중복 선언 했다 가정하자. 이 때 우리는 에러가 발생하는 것을 확인 할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">레그돌</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">먼치킨</span><span class="dl">"</span><span class="p">;</span> 
<span class="c1">// Error: Identifier 'cat' has already been declared.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>하지만 var의 경우 오류가 발생하지 않으며 이전 선언된 변수가 무시되며 다시 선언 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">레그돌</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">먼치킨</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">러시안 블루</span><span class="dl">"</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cat</span><span class="p">)</span> <span class="c1">// "러시안 블루"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h2 id="선언-전-사용">선언 전 사용</h2>
<p>var가 함수 안에 선언 되었다면 이는 함수가 시작 될 때 처리된다. 만약 전역에서 var를 선언했다면 이는 Javascript가 시작 될 떄 처리된다. 이와 같은 특징 때문에 아래의 3 코드는 모두 같게 동작된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">test1</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">cat</span><span class="p">;</span>
  <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">레그돌</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cat</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">test1</span><span class="p">()</span>

<span class="kd">function</span> <span class="nx">test2</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">레그돌</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cat</span><span class="p">)</span>

  <span class="kd">var</span> <span class="nx">cat</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">test2</span><span class="p">()</span>

<span class="kd">function</span> <span class="nx">test3</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">레그돌</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">cat</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cat</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">test3</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위의 test2를 보면 var cat의 선언이 제일 끝에 되어있지만 에러가 발생하지 않는다. 이는 변수 선언이 함수의 시작과 동시에 이루어지기에 함수의 최상위로 끌어올려지는 것이다. 이러한 현상을 ‘호이스팅(Hoisting)’이라 한다.</p>

<p><br />
<br /></p>

<h1 id="hoisting">Hoisting</h1>
<blockquote>
  <p>JavaScript에서 호이스팅(hoisting)이란, 인터프리터가 변수와 함수의 메모리 공간을 선언 전에 미리 할당하는 것을 의미합니다. - MDN -</p>
</blockquote>

<p>var 의 호이스팅은 위에 설명돼있기 떄문에 여기에서는 함수 Hoisting만 다루겠다.</p>

<p><br /></p>

<h2 id="함수-호이스팅">함수 호이스팅</h2>
<p>함수의 호이스팅의 경우 함수가 함수 표현식인지 함수 선언식인지에 따라 결과가 다르다.</p>
<h3 id="함수-선언식">함수 선언식</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">hoisting</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">hello</span><span class="p">()</span>
  
  <span class="kd">function</span> <span class="nx">hello</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// hello</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">hoisting</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>함수 선언식의 경우 정상적으로 호이스팅이 발생하는 것을 확인 할 수 있다.</p>

<h3 id="함수-표현식">함수 표현식</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">hoisting</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">hello</span><span class="p">()</span> <span class="c1">// hello is not a function</span>
   
  <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">hoisting</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>함수 표현식의 경우 var를 사용했을 var에 대한 호이스팅은 발생하지만 함수 호출은 안 된다. 이는 var가 호이스팅 될 때 “undefined”로 초기화 되기 때문이다. (화살표 함수도 같은 현상이 발생한다.)</p>

<p><br /></p>

<h2 id="import">import</h2>
<p>import 역시 호이스팅이 되기때문에 에러가 발생하지 않는다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nx">hellow</span><span class="p">();</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">hellow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./hellow</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h2 id="let-const">let, const</h2>
<p>위에서 호이스팅을 설명할 때 var만 예시로 들고 let과 const는 예시를 들지 않았다. 그러면 let과 const는 호이스팅이 되지 않는 것일까? 아래의 코드를 보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nx">cat1</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">레그돌</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">cat1</span><span class="p">;</span>
<span class="c1">// ReferenceError: Cannot access 'cat1' before initialization</span>

<span class="nx">cat2</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">cat2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">먼치킨</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// ReferenceError: cat2 is not defined</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>let과 const는 위와 같이 ReferenceError가 발생하는 것을 볼 수 있다. 이러한 에러 때문에 let과 const는 호이스팅이 안 된다 라고 생각할 수 있지만 이는 잘못된 생각이다. let과 const는 호이스팅이 된다. 하지만 TDZ에 의해 접근이 금지되기 때문에 ReferenceError가 발생하는 것이다.</p>

<p><br />
<br /></p>

<h1 id="tdztemporal-dead-zone">TDZ(Temporal Dead Zone)</h1>
<p>TDZ(Temporal Dead Zone)는 일시적인 사각지대를 뜻한다. 이에 대해 알아보기 위해서는 변수 선언의 3단계에 대해 먼저 알아보자.</p>

<p><br /></p>

<h2 id="변수-선언의-3단계">변수 선언의 3단계</h2>
<p>변수선언은 선언(Declaration phase), 초기화(Initialization phase), 할당(Assignment phase)으로 이루어 진다.</p>
<h3 id="1-선언declaration-phase">1. 선언(Declaration phase)</h3>
<p>변수를 실행 컨텍스트의 변수 객체에 등록하는 단계이다.</p>

<h3 id="2-초기화initialization-phase">2. 초기화(Initialization phase)</h3>
<p>실행 컨텍스트의 변수를 위해 메모리를 할당하는 과정으로 메모리가 만들어지면 처음에는 “undefined”가 할당된다.</p>

<h3 id="3-할당assignment-phase">3. 할당(Assignment phase)</h3>
<p>사용자가 undefined로 초기화된 메모리의 다른 값을 할당하는 단계이다.</p>

<p><br /></p>

<h2 id="var와-let-const의-차이">var와 let, const의 차이</h2>
<p>var는 실행 컨텍스트에 변수가 등록되는 것과 동시에 undefined로 초기화되며 메모리가 할당된다. 즉, 선언과 초기화가 동시에 일어난다. 하지만 let과 const는 실행 컨텍스트에 변수가 등록은 되지만 TDZ에 의해 메모리 할당이 되지 않는다.(선언과 초기화가 분리되어 진행된다.) 때문에 var, let, const 모두 호이스팅은 되지만 var는 “undefined”로 let과 cosnt는 ReferenceError가 발생하게 되는 것이다.</p>

<p><br /></p>

<h2 id="class">Class</h2>
<p>class또한 TDZ의 영향을 받는다. 때문에 아래와 같이 호이스팅을 해도 TDZ에 의해 ReferenceError가 발생하게 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">myName</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Name</span><span class="p">(</span><span class="dl">"</span><span class="s2">dalaran</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// ReferenceError</span>

<span class="kd">class</span> <span class="nx">Name</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>만약 부모 클래스를 상속받았을 경우 super()를 호출 하기 전까지 this는 TDZ에 바인딩 되어 있다. 때문에 super()가 호출 되기 전에는 this를 사용할 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">Name</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Job</span> <span class="kd">extends</span> <span class="nx">Name</span><span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">job</span> <span class="o">=</span> <span class="nx">job</span><span class="p">;</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">introduce</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Job</span><span class="p">(</span><span class="dl">"</span><span class="s2">dalaran</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">front-end</span><span class="dl">"</span><span class="p">);</span> 
<span class="c1">// ReferenceError</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">Name</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Job</span> <span class="kd">extends</span> <span class="nx">Name</span><span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">job</span> <span class="o">=</span> <span class="nx">job</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">introduce</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Job</span><span class="p">(</span><span class="dl">"</span><span class="s2">dalaran</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">front-end</span><span class="dl">"</span><span class="p">);</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">introduce</span><span class="p">)</span>

<span class="c1">// 출력</span>
<span class="nx">Job</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">dalaran</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">job</span><span class="p">:</span> <span class="dl">'</span><span class="s1">front-end</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">__proto__</span><span class="p">:</span> <span class="p">{</span> <span class="nl">constructor</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">Job</span><span class="p">()</span> <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h2 id="함수의-매개변수">함수의 매개변수</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dalaran</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">hello</span><span class="p">()</span> <span class="c1">//ReferenceError</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>함수의 매개변수는 전역 스코프와 함수 스코프의 중간 스코프에 위치한다. 위의 코드에서 hello의 매개변수 name은 자기 자신을 참조하는데 전역변수의 name보다 같은 스코프에 있는 name을 먼저 참조하게 된다. 때문에 TDZ에 영향을 받는 매개변수는 ReferenceError를 발생시키게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">myName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">dalaran</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">myName</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">hello</span><span class="p">()</span> <span class="c1">// "Hello dalaran"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br />
<br /></p>

<h1 id="정리">정리</h1>
<ul>
  <li>var는 블록 스코프가 없기때문에 전역 스코프 혹은 함수 스코프이다.</li>
  <li>var는 중복 선언을 할 경우 에러를 발생시키지 않으며 마지막에 선언된 값을 갖게된다.</li>
  <li>호이스팅은 var, let, const 등 다 발생한다. 이때 발생하는 ReferenceError는 TDZ에 의한 에러이다.</li>
  <li>TDZ(Temporal Dead Zone)는 let, const, class, super(), 함수 매개변수에 영향을 준다.</li>
</ul>]]></content><author><name>Dalaran</name></author><category term="javascript" /><category term="JavaScript" /><category term="var" /><category term="hoisting" /><category term="TDZ" /><summary type="html"><![CDATA[let, const, var의 차이점은 뭘까? 차이점을 알아보며 Hoisting, TDZ에 관해 알아보자.]]></summary></entry><entry><title type="html">useMemo, useCallback, React.memo</title><link href="http://localhost:4000/react/useMemo,-useCallback,-React.memo/" rel="alternate" type="text/html" title="useMemo, useCallback, React.memo" /><published>2022-05-13T00:00:00+09:00</published><updated>2022-05-13T00:00:00+09:00</updated><id>http://localhost:4000/react/useMemo,%20useCallback,%20React.memo</id><content type="html" xml:base="http://localhost:4000/react/useMemo,-useCallback,-React.memo/"><![CDATA[<p>React는 state, props의 값이 바뀌거나 부모 컴포넌트가 렌더링 됐을 떄 렌더링이 발생하는 특성이 있다. 때문에 상위 컴포넌트가 렌더링 됐을 때 하위 컴포넌트도 같이 렌더링이 되는 경우가 많다. 이러한 문제를 최적화 하기위해 제공하는 기능(hooks)인 useMemo, useCallback, React.memo에 대해 알아보도록 하자. (모든 에제코드는 react doc에 있는 예제이다.)</p>

<h1 id="memoization">Memoization</h1>
<blockquote>
  <p>메모이제이션(memoization)은 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이다. - 위키백과 -</p>
</blockquote>

<p><br /></p>

<h1 id="usememo">useMemo</h1>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">memoizedValue</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">computeExpensiveValue</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">),</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p>함수가 실행된 반환값을 메모이제이션 하고 그 값을 반환한다. 만약 의존성배열 ( [ a, b ] )값이 변경되면 새로운 반환값을 메모이제이션 한 후 반환한다.</p>
  </li>
  <li>
    <p>주로 계산량이 많아 비용을 높을 떄 사용한다.</p>
  </li>
  <li>
    <p>useMemo에 전달된 함수는 렌더링중에 실행되기 떄문에 렌더링 중에 동작하지 않는 함수를 넣어서는 안된다.</p>
  </li>
  <li>
    <p>의존성배열이 없다면 렌더링될 떄마다 실행된다.</p>
  </li>
</ul>

<p><br /></p>

<h1 id="usecallback">useCallback</h1>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">memoizedCallback</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span>
  <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">doSomething</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">],</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>메모이제이션된 함수를 반환한다.</li>
  <li>의존성배열값이 변경되면 함수를 재 생성한다. 즉, 함수를 재생성한다.</li>
  <li>함수 인스턴스를 지속적으로 유지해야 하는 경우에 사용한다.</li>
  <li>의존성 값의 배열이 콜백 인자로 전달되지는 않는다. 따라서 콜백안에서 참조되는 모든 값은 의존성배열에 나타나야한다.</li>
  <li>useCallback(fn, deps)은 useMemo(() =&gt; fn, deps)와 같다.</li>
</ul>

<p><br /></p>

<h1 id="공통적인-주의사항">공통적인 주의사항</h1>
<ul>
  <li>어플의 근본적인 문제를 해결하기 위해 useMemo나 useCallback을 사용하면 안 되며 이는 docs에도 명시되어 있다.(최적화를 위해 사용해할 수 있을 뿐이다.)</li>
  <li>이들도 일정 코스트가 있기때문에 분별없이 남발하여 사용할 경우 오히려 성능 악화를 발생시킬 수 있다.</li>
  <li>의존성 배열에 들어가는 값이 너무 많을 경우 사용하지 않는 것이 좋다.</li>
</ul>

<p><br /></p>

<h1 id="reactmemo">React.memo</h1>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">MyComponent</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/* props를 사용하여 렌더링 */</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">areEqual</span><span class="p">(</span><span class="nx">prevProps</span><span class="p">,</span> <span class="nx">nextProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="cm">/*
  nextProps가 prevProps와 동일한 값을 가지면 true를 반환하고, 그렇지 않다면 false를 반환
  */</span>
<span class="p">}</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">,</span> <span class="nx">areEqual</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>HOC(Higher Order Component)이다.</li>
  <li>렌더링 결과를 memo에 메모이제이션 한 후, 렌더링 시 동일한 결과를 렌더링 할 경우 이를 재사용한다.</li>
</ul>

<h2 id="주의사항">주의사항</h2>
<ul>
  <li>porps 변화에만 영향을 준다. 때문에 state, context가 변한다면 다시 렌더링 된다.</li>
  <li>이는 성능 최적화를 위해 사용해야하며 렌더링 방지시 사용할 경우 버그를 유발할 수 있다.</li>
  <li>메모이제이션 작업시간이 필요하기 때문에 메모이제이션 이후 자주 사용되지 않는 컴포넌트라면 오히려 성능이 낮아질 수 있다.</li>
</ul>

<p><br /></p>]]></content><author><name>Dalaran</name></author><category term="react" /><category term="react" /><category term="useMemo" /><category term="useCallback" /><category term="React.memo" /><summary type="html"><![CDATA[useMemo, useCallback, React.memo의 개념과 주의사항을 알아보자.]]></summary></entry><entry><title type="html">React-Native installation</title><link href="http://localhost:4000/react-native/react-native-intallation/" rel="alternate" type="text/html" title="React-Native installation" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>http://localhost:4000/react-native/react%20native%20intallation</id><content type="html" xml:base="http://localhost:4000/react-native/react-native-intallation/"><![CDATA[<h1 id="react-native">React-Native</h1>
<blockquote>
  <p>React Native는 React 와 앱 플랫폼의 기본 기능을 사용하여 Android 및 iOS 애플리케이션을 빌드하기 위한 오픈 소스 프레임워크입니다 . React Native를 사용하면 JavaScript를 사용하여 플랫폼의 API에 액세스할 수 있을 뿐만 아니라 React 구성 요소를 사용하여 UI의 모양과 동작을 설명할 수 있습니다. 재사용 가능하고 중첩 가능한 코드 번들입니다. -React Native-</p>
</blockquote>

<p>React-Native는 설치 시 mac, version 등 개발 환경에 따라 오류가 다르게 발생할 수 있다. 이런 경우에는 검색을 이용해 충돌을 잡아야 한다.</p>

<h2 id="pros">Pros</h2>
<p>### 1. 러닝 커브
  JavaScript 기반이기 때문에 JS를 사용하는 Front-end, Back-end 개발자라면 다른 언어를 학습하지 않아도 된다.</p>

<p>### 2. 컴포넌트 기반 (재사용성)
  React에서 파생되었기 때문에 Component 기반으로 구성된다. 때문에 생산성과 재사용성에서 메리트를 갖는다.</p>

<p>### 3. 멀티 플랫폼
  하나의 코드로 iOS, Andriod 둘 다 배포가 가능하다. (단, iOS의 경우 mac 에서만 가능하다.)</p>

<h2 id="cons">Cons</h2>
<p>### 1. 성능
  Hybrid App 이기 때문에 Native 개발 방식(kotlin, swift)에 비해 성능이 떨어진다.</p>

<p>### 2. 오픈 소스
  오픈 소스인 만킴 업데이트가 자주 되며, 그에 따른 버그 또한 동반될 수 있다.</p>

<p><br /></p>

<h1 id="installation">Installation</h1>
<h2 id="nvm">NVM</h2>
<p>nodejs를 효율적으로 관리하기 위해 NVM(Node Version Manager)을 설치한 후 NVM을 통해 node를 설치한다. 작업은 터미널에서 진행된다.</p>

<p>– NVM git : <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>

<ol>
  <li>nvm 설치
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>프로필 파일 설정 (~/.bash_profile, ~/.zshrc, ~/.profile, ~/.bashrc) editor는 vi, vim, nano 중 편한걸로 사용하면 된다.
ex) vi ~/.zshrc
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] &amp;&amp; printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>프로필 파일 적용
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>source (프로필 파일) 
// ex) source ~/.zshrc
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>node 설치
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>nvm install (node version)
// ex) nvm install 16.15.0
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>설치 node가 여러개인 경우 version 선택 (하나라면 생략 가능)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>nvm use (node version)
// ex) nvm install 16.15.0
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>설치 버전 확인
npm은 node 설치시 자동으로 설치된다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>node -v
npm --version
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<h2 id="android-studio">Android Studio</h2>
<p>– site : https://developer.android.com/studio?gclid=Cj0KCQjwmuiTBhDoARIsAPiv6L96YmsgQaA6C0sw7QrkwrWR7cOENZuCZNNmzC8NhfdFaad-PClQpoIaAsDJEALw_wcB&amp;gclsrc=aw.ds</p>

<ol>
  <li>
    <p>해당 링크에서 Download Andriod Studio 클릭 후 설치</p>
  </li>
  <li>
    <p>More Actions - SDK Manager 설정
Show Package Details 클릭 한 후 필요한 SDK를 설치한다. (최신 버전이나 React-Native doc에서 추천하는 SKD를 설치한다.)</p>
  </li>
</ol>

<p><img src="/assets/images/2022-05-11/SDK_Manager.png" /></p>

<ol>
  <li>More Atcions - Virture Device Manager 설정
    <ul>
      <li>create device 클릭 후 원하는 device를 정한 후 Next</li>
      <li>target을 설치한 SDK로 설정한 후 Next
<img src="/assets/images/2022-05-11/AVD_Setting.png" /></li>
      <li>AVM Name 및 필요 설정 후 Finish
<img src="/assets/images/2022-05-11/AVD_Finish.png" /></li>
    </ul>
  </li>
  <li>환경 변수 프로필 파일에 설정  (~/.bash_profile, ~/.zshrc, ~/.profile, ~/.bashrc) editor는 vi, vim, nano 중 편한걸로 사용하면 된다.
ex) vi ~/.zshrc
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>export ANDROID_SDK_ROOT=/Users/dalaran/Library/Android/sdk
export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<p>이 때 ANDROID_SDK_ROOT 가 Android SDK Location 경로와 같아야한다.
<img src="/assets/images/2022-05-11/SDK_Location.png" /></p>

<ol>
  <li>변경사항 적용
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>source ~/.zshrc
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>adb로 적용 확인
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre> ✘ Dalaran ✨   ~/Desktop/blog/dalaranl.github.io   master ±  adb
Android Debug Bridge version 1.0.41
Version 33.0.1-8253317
Installed as /Users/dalaran/Library/Android/sdk/platform-tools/adb
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<h2 id="oracle-java">Oracle Java</h2>
<p>–site : https://www.oracle.com/java/technologies/downloads/</p>

<p>해당 링크에서 JAVA SE 다운로드.</p>

<ul>
  <li>version 확인
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>java --version
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>설치 파일 위치
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>/Library/Java/JavaVirtualMachines/
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="xcode">Xcode</h2>
<ol>
  <li>AppStore에서 Xcode 검색 후 설치</li>
  <li>Xcode 설정
Xcode - Preferences - Location - Command Line Tools 선택
<img src="/assets/images/2022-05-11/Xcode.png" /></li>
</ol>

<p><br /></p>

<h2 id="cocoapod">CocoaPod</h2>
<p>Object-C 혹은 Swift로 개발된 오픈 라이브러리를 간편하게 확장 시키게 도와주는 iOS용 프로그램이다.</p>

<p>!! 설치 전 OS 버전과 Xcode 버전을 확인 후 이와 호환되는 cocoapods 버전을 설치한다.</p>

<ul>
  <li>gem을 이용하여 설치</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>sudo gem install cocoapods

// 특정 version을 설치하고 싶을 때

sudo gem install cocoapods -v (version)
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>version 확인</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>pod --version
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h2 id="react-native-cli">React-Native CLi</h2>
<ol>
  <li>설치
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>npm install -g react-native-cli
// -g 는 Global 옵션이다.
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<h1 id="프로젝트-생성">프로젝트 생성</h1>
<p>프로젝트를 생성할 폴더 위치에서 시작</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>react-native init (프로젝트 명)

// version 지정

react-native init --version (version) (프로젝트 명)
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="연동-확인">연동 확인</h1>
<h2 id="ios">iOS</h2>
<p>yarn을 이용하여 구동한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>1. yarn install

2. cd ./ios

3. pod install

4. yarn ios
</pre></td></tr></tbody></table></code></pre></div></div>

<p>만약 build error가 발생할 경우 검색으로 해결한다.</p>

<h3 id="command">command</h3>
<ul>
  <li>
    <dl>
      <dt>command + R</dt>
      <dd>코드를 적용시키기 위해 화면을 Refresh 한다.</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>command + D(debug menu) - Enable Fast Refresh</dt>
      <dd>Refresh를 자동으로 해준다.</dd>
    </dl>
  </li>
</ul>

<h2 id="andriod">Andriod</h2>
<p>yarn을 이용하여 구동한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>yarn android
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="command-1">command</h3>
<ul>
  <li>
    <dl>
      <dt>R + R (2번 연타)</dt>
      <dd>코드를 적용시키기 위해 화면을 Refresh 한다.</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>command + M(debug menu) - Enable Fast Refresh</dt>
      <dd>Refresh를 자동으로 해준다.</dd>
    </dl>
  </li>
</ul>]]></content><author><name>Dalaran</name></author><category term="react-native" /><category term="react-native" /><summary type="html"><![CDATA[React-Native cli를 설치하고 android studio, Xcode와 연동해보자.]]></summary></entry><entry><title type="html">Class와 Function</title><link href="http://localhost:4000/react/class-and-function/" rel="alternate" type="text/html" title="Class와 Function" /><published>2022-05-05T00:00:00+09:00</published><updated>2022-05-05T00:00:00+09:00</updated><id>http://localhost:4000/react/class%20and%20function</id><content type="html" xml:base="http://localhost:4000/react/class-and-function/"><![CDATA[<p>React에 관한 코드를 검색을 하면 나오는 글들 중 서로다른 형태의 코드를 본적이 있을것이다. 바로 Class를 사용한 방법과 function을 사용한 방법의 형태이다. 과거에는 함수형보다 클래스형 으로 코드를 많이 구현했지만 오늘날에는 점점 함수형으로 변하는 추세에 있다. 두 방식의 차이점에는 어떤 것이 있으며 왜 함수형으로 변화하게 되었는지 이번글에 포스팅하려 한다.</p>

<p><br /></p>

<h1 id="차이점">차이점</h1>
<h2 id="1-rendering">1. rendering</h2>
<p>두 방식의 가장 명확한 차이점은 구문에 있다.</p>
<h3 id="class">Class</h3>
<p>‘Class’는 React.Component 렌더링 메서드가 있는 확장된 JavaScript 클래스이다. 때문에 Class형으로 코드를 만들 때는 만드시 ‘Component’를 상속받아야 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Example</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
 <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span> <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="function">Function</h3>
<p>‘Function’은 JSX를 반환하는 일반 JavaScript 함수이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Example</span><span class="p">()</span> <span class="p">{</span>
 <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">world</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h2 id="2-props">2. Props</h2>
<h3 id="class-1">Class</h3>
<p>클래스형은 component를 상속받기 떄문에 this.props로 접근해야 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Example</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
 <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
   <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
   <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span> <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="function-1">function</h3>
<p>함수형은 함수의 인자로 prop를 받는다. 이 떄 구조분해 할당이 가능하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// props</span>
<span class="kd">function</span> <span class="nx">Example</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="c1">// 구조분해</span>
<span class="kd">function</span> <span class="nx">Example</span><span class="p">({</span> <span class="nx">name</span> <span class="p">})</span> <span class="p">{</span>
 <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h2 id="3-state">3. State</h2>
<h3 id="class-2">Class</h3>
<p>class에 constructor()를 생성한 후 그 안에 this.state를 선언하여 사용한다. state 값을 변경할 떄는 setState()를 사용해야 한다. 이 때 만약 super(props)를 호출하지 않는다면 this.props가 생성자에 정의되자 않아 버그가 발생할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">ClassComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
 <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
     <span class="na">count</span><span class="p">:</span> <span class="mi">0</span>
   <span class="p">};</span>
 <span class="p">}</span>

 <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="p">(</span>
     <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">count</span><span class="p">:</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span> <span class="nx">times</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>       <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})}</span><span class="o">&gt;</span>
         <span class="nx">Click</span>
       <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>     <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>   <span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="function-2">function</h3>
<p>react에서 제공하는 Hook 중 하나인 useState를 사용한다. 배열을 구조화 하여 사용하며 JavaScript가 허용하는 모든 유형을 초기값으로 사용할 수 있다. (null, string, object…)</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">FunctionalComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

 <span class="k">return</span> <span class="p">(</span>
   <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
     <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="na">count</span><span class="p">:</span> <span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>     <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">Click</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span> <span class="p">);</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p><br /></p>

<h2 id="4-life-cycle">4. Life Cycle</h2>
<h3 id="class-3">Class</h3>
<p>상속받은 Component에서 생명주기 메소드를 재정의 하여 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nx">ClassComponent</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
 <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
   <span class="c1">// 첫 렌더링이 완료된 직후</span>
 <span class="p">}</span>

 <span class="nx">componentWillUnmount</span><span class="p">()</span> <span class="p">{</span>
   <span class="c1">// 마운트 해제시</span>
 <span class="p">}</span>

 <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">World</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span> <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="function-3">Function</h3>
<p>React에서 제공하는 Hook 중 하나인 useEffect를 사용한다. 의존성 배열 [ ]의 유무, return 등을 이용하여 class의 생명주기를 구현할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">FunctionalComponent</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
 <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="c1">// compoenetDidMount</span>
 <span class="p">},</span> <span class="p">[]);</span>

<span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="c1">//componentWillUnmount</span>
   <span class="p">};</span>
 <span class="p">},</span> <span class="p">[]);</span>

 <span class="k">return</span> <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="nx">World</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">;
</span><span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h1 id="마무리">마무리</h1>
<p>위에 정리한 것 처럼 클래스형과 함수형은 여러 차이점이 있다. 여기서 차이점의 공통점을 보자면 함수형에서는 Hook을 사용하지 않으면 class와 같이 사용하기가 힘든 경우가 있다는 것이다(state, life cycle). React의 Hooks는 처음부터 있던 것이 아니다. 때문에 Hooks가 제공되지 않을 때는 함수형으로 구현할 수 없던 것들이 Hooks이 제공됨으로서 구현 가능하게 되었다. React에서 Hook사용을 권장하기도 하지만 복잡하게 구현되는 Class를 보다 쉽고 깔끔하게 구현하기 좋은 함수형이 유지보수 측면에서도 메리트가 있기에 요즘 더 선호되는 것이 아닌가라는 생각이 든다.</p>]]></content><author><name>Dalaran</name></author><category term="react" /><category term="react" /><category term="class" /><category term="function" /><summary type="html"><![CDATA[Class와 Function의 차이점을 알아보고 클래스형에서 함수형으로 변화하게된 이유를 살펴보자.]]></summary></entry><entry><title type="html">상태관리 라이브러리의 장단점 정리</title><link href="http://localhost:4000/react/redux-mobx-context/" rel="alternate" type="text/html" title="상태관리 라이브러리의 장단점 정리" /><published>2022-05-05T00:00:00+09:00</published><updated>2022-05-05T00:00:00+09:00</updated><id>http://localhost:4000/react/redux%20mobx%20context</id><content type="html" xml:base="http://localhost:4000/react/redux-mobx-context/"><![CDATA[<p>React로 개발을 하다보면 props를 많이 사용하게 된다. 하지만 이 과정에서 구조상 props가 너무 깊게 내려간다거나 같은 하나의 데이터를 여러 컴포넌트에서 공통적으로 사용해야 하는 경우가 발생한다. 이 경우 상태 관리를 이용하여 이를 해결할 수 있는데, 상황에 따라 혹은 선호도에 따라 선택할 수 있는 라이브러리가 많다. 이번 포스팅에서는 상태관리 툴에 약간의 장단점과 내 생각을 정리해 보려 한다. (본인은 context만 사용해 보았다.)</p>

<p><br /></p>

<h1 id="redux">Redux</h1>
<p>상태관리를 위해 사용하는 JavaScript 라이브러리 이다. Flux 아키텍쳐를 따르며 단방향 데이터 흐름 모델을 통해 상태를 관리를하여 확장성을 늘려준다.</p>

<h2 id="장점">장점</h2>
<h3 id="1-상태-예측이-가능하다">1. 상태 예측이 가능하다.</h3>
<p>동일한 상태와 액션이 리듀서에 전달되면 리듀서는 순수 함수이기 때문에 항상 동일한 결과가 생성된다. 또한 이전 상태 사이를 앞뒤로 이동하고 결과를 실시간으로 볼 수 있습니다.</p>

<h3 id="2-유지-보수가-용이하다">2. 유지 보수가 용이하다.</h3>
<p>코드를 구성하는 방법에 대해 엄격하므로 Redux에 대한 지식이 있는 사람이 Redux 애플리케이션의 구조를 더 쉽게 이해할 수 있다.</p>

<h3 id="3-디버깅이-쉽다">3. 디버깅이 쉽다.</h3>
<p>어떤 액선이 일어나고 데이터가 어떻게 변화했는지 로그가 남는다. 또한 개발자는 이전의 특정 상태로 돌아가볼 수 있다. 때문에 시간 여행이 가능해지며 버그가 나기 이전 상태로 돌아가서 테스트해볼 수 있다.</p>

<h3 id="4-한-곳에서-관리">4. 한 곳에서 관리</h3>
<p>store를 이용하여 상태를 한 곳에서 관리한다. 전역상태를 관리할 때 효율적이다.</p>

<h2 id="단점">단점</h2>
<h3 id="1-코드의-증량">1. 코드의 증량</h3>
<p>리덕스로 코드를 구현하는 순간 필수적으로 만들어야하는 파일이 있다. 때문에 코드량이 그만큼 증가하게 된다.</p>

<h3 id="2-읽기-전용">2. 읽기 전용</h3>
<p>리덕스는 상태를 읽기 전용으로 취급하지만 읽기 전용으로 만들어주지는 않는다. 때문에 항상 직접 수정하지 않게 하기위해 주의해야 한다.</p>

<h3 id="3-컴포넌트와의-연결성">3. 컴포넌트와의 연결성</h3>
<p>store와 component를 연결하기 위해 mapStateToProps, mapDispatchToProps 와 같은 메서드가 필요하다. (코드량이 증가한다.)</p>

<p><br /></p>

<h1 id="mobx">Mobx</h1>

<blockquote>
  <p>MobX는 functional reactive programming을 투명하게 적용함으로써 상태 관리를 쉽고 확장성 있게 만들어주는 검증된 라이브러리입니다. -Mobx-</p>
</blockquote>

<h2 id="장점-1">장점</h2>
<h3 id="1-객체지향적">1. 객체지향적</h3>
<p>mobx는 객체지향적으로 class를 사용할 것을 권장한다.</p>

<h3 id="2-데코레이터">2. 데코레이터</h3>
<p>데코레이터를 제공하기 때문에 좀더 깔끔하게 구성이 가능하다.</p>

<h3 id="3-캡슐화">3. 캡슐화</h3>
<p>state의 변경을 오직 메서드를 통해서만 변경할 수 있게 설정이 가능하다. (privite)</p>

<h2 id="단점-1">단점</h2>
<h3 id="1-디버깅이-불편하다">1. 디버깅이 불편하다</h3>
<p>리덕스와 같은 툴이 마땅히 없기에 디버깅을 위해서 console.log를 이용해야 한다.</p>

<h3 id="2-데코레이터-1">2. 데코레이터</h3>
<p>개인적으로 데코레이터는 장점이자 단점같다. Class 형으로 컴포넌트를 구성했다면 데코레이터는 장점이 될 수 있지만 함수형으로 구성했다면 단점이라 생각한다. 함수형에서 데코레이터를 사용하기 위해서는 useContext hook을 이용해야하며 컴포넌트에 연결하기 위해 hoc로 랩핑해야 한다.</p>

<h3 id="3-레퍼런스">3. 레퍼런스</h3>
<p>레퍼런스 코드가 부족하다. 특히 함수형의 경우 정말 찾아보기 힘들다.</p>

<p><br /></p>

<h1 id="context-api">Context api</h1>
<h2 id="장점-2">장점</h2>
<h3 id="1-접근성">1. 접근성</h3>
<p>react에서 제공하는 기술이기에 추가 설치가 필요없다.</p>

<h3 id="2-러닝-커브">2. 러닝 커브</h3>
<p>Mobx와 Redux에 비해 러닝커브가 낮다.</p>

<h3 id="3-간결성">3. 간결성</h3>
<p>사용하기위한 코드 구성이 가장 간결하다.</p>

<h2 id="단점-2">단점</h2>
<h3 id="rendering">rendering</h3>
<p>context의 provider는 value값이 변할 경우 해당 값을 사용하는 컴포넌트 또한 리렌더링이 된다. 만약 컨택스트를 상태값과 액션값으로 나누어 사용하면 이 문제는 해결이 가능하다. 하지만 그에따른 보일러 플레이트코드가 증가하며 복잡해질 수록 provider가 늘어나 지옥이 될 수 있다.</p>

<p><br /></p>

<h1 id="recoil">Recoil</h1>
<p>fecebook에서 만든 상태관리 라이브러리이다. 기존 context의 렌더링 문제, 단일값만 저장 가능한 문제(consumer를 가지는 여러 값의 집합을 저장 못하는 문제), 코드 분활의 어려움을 해결하고자 만든 라이브러리이다.</p>

<h2 id="장점-3">장점</h2>
<h3 id="1-간단한-인터페이스로">1. 간단한 인터페이스로</h3>
<p>get/set으로 사용할 수 있도록 boilerplate-free API를 제공</p>

<h3 id="2-증분-및-분산">2. 증분 및 분산</h3>
<p>코드 분할이 가능해진다.</p>

<h3 id="3-컴포넌트-비수정">3. 컴포넌트 비수정</h3>
<p>컴포넌트를 수정하지 않고 상태 데이터로 대체 가능하며 파생된 데이터를 사용시 동기식과 비동기식 간에 이동이 가능하다.</p>

<h2 id="단점-3">단점</h2>
<h3 id="1-호환성">1. 호환성</h3>
<blockquote>
  <p>Recoil 빌드는 ES5로 트랜스파일 되지 않으므로, Recoil을 ES5와 사용하는 것은 지원하지 않는다. -Recoil-</p>
</blockquote>

<p>ES5에서도 사용할 수 있는 방법은 있으니 버그가 발생할 수 있다 명시되어 있다.</p>

<h3 id="2-레퍼런스">2. 레퍼런스</h3>
<p>나온지 얼마 안된만큼 레퍼런스가 부족하다.</p>

<h2 id="공통적인-단점">공통적인 단점</h2>
<p>컴포넌트의 재사용성을 해칠 수 있다.</p>

<h1 id="맺음말">맺음말</h1>
<p>이상으로 각 상태관리 라이브러리에 대하여 간략히 알아보았다. 사실 사용해본 기능이 context뿐인 만큼 각자의 개념만 살짝 맛봤을 뿐 어떤것이 더 좋은지 경험에서 판단하기는 불가능 한것같다. 하지만 개인적으로 규모가 작거나 전역관리 하나만 필요할떄는 context만으로도 충분할 것 같으며 recoil의 등장으로 조금씩 선호도가 변할 수도 있을 것 같다는 생각이 들었다. 또한 전역관리는 중요하지만 남발할 경우 재사용성을 해할 수 있다는 공통적인 단점이 있기에 항상 사용에 주의해야 할 것같다.</p>]]></content><author><name>Dalaran</name></author><category term="react" /><category term="react" /><category term="redux" /><category term="mobx" /><category term="context" /><category term="recoil" /><summary type="html"><![CDATA[상태관리 라이브러리는 여러가지가 있다. 각 라이브러리의 장단점을 알아보자.]]></summary></entry><entry><title type="html">객체 지향 프로그래밍</title><link href="http://localhost:4000/javascript/oop/" rel="alternate" type="text/html" title="객체 지향 프로그래밍" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/javascript/oop</id><content type="html" xml:base="http://localhost:4000/javascript/oop/"><![CDATA[<p>  흔히 JavaScript에 대해 설명하라 하면 자주 등장하는 단어가 객체 지향 언어이다. 이외에도 프로그래밍을 하다보면 객체 지향 프로그래밍이라는 단어를 종종 듣게된다. 이번 포스팅에서는 객체 지향 프로그래밍이 무엇인지, JavaScript가 왜 객체지향 언어라 할 수 있는지에 대해 정리해 보려한다.</p>

<p><br /></p>

<h2 id="객체지향-프로그래밍이란">객체지향 프로그래밍이란</h2>
<blockquote>
  <p>객체 지향 프로그래밍(영어: Object-Oriented Programming, OOP)은 컴퓨터 프로그래밍의 패러다임 중 하나이다. 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다. -위키백과-</p>
</blockquote>

<h2 id="oop가-나타난-배경">OOP가 나타난 배경</h2>
<p>초창기에 프로그래밍은 순차적이었다. 이러한 특성때문에 반복적 작업을 할 때 특정 범위의 코드를 다시 실행하기 힘들었으며 이를 위해 goto문을 만들게 된다. 때문에 절차적 프로그래밍이라는 방법이 나타나게 되지만 전역 변수의 형태로 만들다보니 스케일이 커질수록 변수에 같은 이름을 쓸 수 없는 문제점이 발행하게 된다. 이를 해결하기 위해 나타난 형태가 struct(구조체)이다.구초제를 이용하여 프로그래밍을 하다보니 특정 구조체를 동작하는 함수군들이 만들어지게 되었고 이를 함께 관리하기 위해 class가 만들어진다.</p>

<p><br /></p>

<h2 id="class">Class</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Character</span> <span class="o">{</span>
    <span class="nl">name:</span> <span class="s">"nunu"</span>
    <span class="nl">q:</span> <span class="s">"Biggest Snowball Ever!"</span>
    <span class="nl">w:</span> <span class="s">"Snowball Barrage"</span>
    <span class="nl">e:</span> <span class="s">"consume"</span>
    <span class="nl">r:</span> <span class="s">"Absolute Zero"</span>

    <span class="n">useSkill</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="n">let</span> <span class="n">chracter1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Character</span><span class="o">().</span>
<span class="n">character1</span><span class="o">.</span><span class="na">useSkill</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이와같이 Class를 통해 데이터 처리 방식이 하나의 모듈로 관리되면서 작은 프로그램이 독립적으로 돌아가는 형태를 띄게 된다. 때문에 이와 같은 작은 부품을 미리 만들고 조합하는 형식으로 프로그래밍이 가능하게 되었다. 구조체와 함수를 합쳐서 선언하는 것을 ‘Class’,  Class를 통해 만들어진 결과물을 ‘Object’라 부르게 되었으며, 프로그래밍을 객체로 바라보는 관점으로 객체 지향 프로그래밍 (Object-Oriented Programming)이라는 단어가 나타났다.</p>

<h3 id="캡슐화privite">캡슐화(Privite)</h3>
<p>캡슐화는 독립된 객체를 사용하게되면서 외부로 노출해야 하는 값과 내부에서만 사용하는 값을 구분하는 기능이다. ‘privite’를 이용하여 외부에서 수정을 할 수 없게 하는 것으로 객체의 안정성을 높이고 필요한 메소드만 열어둠으로써 객체의 재사용성을 높일 수 있도록 하였다.</p>

<h3 id="상속extends-추상화-다양화">상속(extends), 추상화, 다양화</h3>
<p>상속은 객체의 일부분만 사용하는 방법으로 객체에서 공통적인 부분만 따로 만들고 해방 코드를 같이 상송받아 사용하는 방법이다. 이를 위해 공통적인 부분을 따로 모아 상위 개념으로 이름을 붙이는 추상화가 이루어 졌으며 여러가지 하위 타입에 참조할 수 있는 다향성이 생기게 되었다. 이 3개지 개념을 통해 객체의 일부분이 재사용가능하게 설계가 가능해진 것이다.</p>

<p><br /></p>

<h2 id="solid">SOLID</h2>
<p>이렇게 객체 지향 프로그래밍을 하다보니 규모가 점점 커지게 되었으며 이에따라 객체지향을 잘하기 위한 5원칙이 나오게되는데 이것이 SOLID이다.</p>

<h3 id="s-single-responsibility-principle">S (Single Responsibility Principle)</h3>
<blockquote>
  <p>단일 책임 원칙(single responsibility principle)이란 모든 클래스는 하나의 책임만 가지며, 클래스는 그 책임을 완전히 캡슐화해야 함을 일컫는다. -위키백과-</p>
</blockquote>

<h3 id="o-open-closed-principle">O (Open-Closed Principle)</h3>
<blockquote>
  <p>개방-폐쇄 원칙(Open-Closed Principle)은 ‘소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다’는 프로그래밍 원칙이다. -위키백과-</p>
</blockquote>

<h3 id="l-liskov-substitution-principle">L (Liskov Substitution Principle)</h3>
<blockquote>
  <p>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다. -위키백과-</p>
</blockquote>

<h3 id="i-interface-segregation-principle">I (Interface Segregation Principle)</h3>
<blockquote>
  <p>인터페이스 분리 원칙, “특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.” -위키백과-</p>
</blockquote>

<h3 id="d-dependency-inversion-principle">D (Dependency Inversion Principle)</h3>
<blockquote>
  <p>의존관계 역전 원칙, 프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙을 따르는 방법 중 하나다. -위키백과-</p>
</blockquote>

<p><br /></p>

<h2 id="javascript">JavaScript</h2>
<p>자바스크립트는 기존의 객체 지향 프로그래밍이 복잡성을 피하기 위해 객체지향의 상속, 추상화, 다양화를 다른 방식으로 접근한 언어이다. 우리가 흔히 사용하는 자바스크립트의 객체가 이와 같은 케이스이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">character</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">nunu</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">q</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Biggest Snowball Ever!</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">w</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Snowball Barrage</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">e</span><span class="p">:</span> <span class="dl">"</span><span class="s2">consume</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">r</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Absolute Zero</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">useSkill</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>또한 new를 이용해 객체를 생성하던 방법을 function의 prototype을 이용하여 해결하였다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">character</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">skill</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">skill</span> <span class="o">=</span> <span class="nx">skill</span>
<span class="p">}</span>

<span class="nx">character</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">check</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="p">}</span>

<span class="kd">var</span> <span class="nx">nunu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">character</span><span class="p">(</span><span class="dl">"</span><span class="s2">누누</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Q</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">nunu</span><span class="p">.</span><span class="nx">check</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이렇든 다양한 방법을 통해 자바스크립트는 기존의 객체 지향에서 복잡하게 구현해야 했던 패턴들을 간단하게 구현할 수 있게 하였다. 또한 객체 지향과 함수형을 적절하게 사용하는 방법으로 발전하게 되었다. (ES6의 Class 문법, TypeScript)</p>

<p>*ES6에서 추가된 class는 prototype 방식을 class처럼 보여주는 것이다.</p>]]></content><author><name>Dalaran</name></author><category term="javascript" /><category term="JavaScript" /><category term="OOP" /><category term="객체지향" /><summary type="html"><![CDATA[객체 지향 프로그래밍이 무엇이며 JavaScript가 객체지향인 이유가 뭘까?]]></summary></entry><entry><title type="html">typeof와 Data type</title><link href="http://localhost:4000/javascript/typeof/" rel="alternate" type="text/html" title="typeof와 Data type" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/javascript/typeof</id><content type="html" xml:base="http://localhost:4000/javascript/typeof/"><![CDATA[<p>JavaScript에는 ‘typeof’라는 연산자가 있다. 이는 자료형을 문자열로 반환해주는 연산자로 코드를 만들 때 종종 사용하게 된다. 하지만 이 연산자를 쓸 때 가끔 생각과는 다른 결과가 종종 나오기도 한다. 이는 Data type과 연관이 있는데 어떠한 경우에 이런 현상이 나타나는지 왜 이런 현상이 발생하는지에 대해 포스팅 하려한다.</p>

<p><br /></p>

<h1 id="typeof">typeof</h1>
<blockquote>
  <p>typeof 연산자는 피연산자의 평가 전 자료형을 나타내는 문자열을 반환합니다.</p>
</blockquote>

<p>typeof 는 typeof operand 와 같은 형태로 사용된다. 이 때, operand란 자료형을 가져올 객체 또는 원시값을 나타내는 표현식을 뜻한다.</p>

<p><br /></p>

<h1 id="특이케이스">특이케이스</h1>

<h2 id="number">Number</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// Numbers</span>
<span class="k">typeof</span> <span class="mi">37</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">;</span>
<span class="k">typeof</span> <span class="mf">3.14</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">;</span>
<span class="k">typeof</span> <span class="kc">NaN</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>3.14와 같은 소수점이나 NaN 같은 타입을 보았을 때 혼동이올 수 있다. 하지만 type는 객체 또는 원시값이 기준이기 때문에 모두 number로 통일 된다.</p>

<h2 id="typeof-typeof-x">typeof (typeof x)</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// Strings</span>
<span class="k">typeof</span> <span class="p">(</span><span class="k">typeof</span> <span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>typeof를 typeof 연산자로 확인하면 return 값 기준으로 연산이 된다 생각할 수 있다. 하지만 typeof를 typeof로 연산할 때는 항상 ‘string’이 리턴된다.</p>

<h2 id="null">null</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">typeof</span> <span class="kc">null</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>null은 얼핏보면 ‘undefined’라고 생각할 수 있다. 하지만 null은 ‘object’ 리턴한다. 이는 자바스크립트가 처음 구현될 때 자바스크립트 값이 타입태그와 값으로 표시된 것이 이유이다. 객체의 타입 태그는 0이었으며 null은 Null Point(대부분의 플랫폼에서 0x00)으로 표시되었다. 때문에 null 또한 타입 태그로 0을 가지며 typeof가 object를 반환하는 결과를 초래하게 되었다.</p>

<h2 id="object">Object</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">typeof</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">;</span>
<span class="k">typeof</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Date()는 내장 함수이기 때문에 object를 반환한다. array의 typeof는 ‘object’이며 array를 판별하기 위해서는 Array.isArray( )를 사용하거나 Object.prototype.toString.call( )을 사용해야 한다.</p>

<p><br /></p>

<h1 id="data-type">Data type</h1>
<p>array가 object를 반환하는 이유는 위에서 잠깐씩 설명했지만 이는 Data type과 큰 연관이 있다. Data type은 크게 Primitive type(기본/원시 타입)과 Reference type(참조 타입)으로 나뉘어진다. typeof 또한 반환값으로 위와 같은 타입으로 반환하기 때문에 이러한 현상이 발생하는 것이다. Primitive type과 Reference type에 대해 좀 더 알아보면 이해가 편해질 것이다.</p>

<h2 id="primitive-type">Primitive type</h2>
<p>Primitive type에 해당하는 값은 원시 값이 있다. JavaScript에서의 원시 값은 객체가 아니면서 메서드도 가지지 않는 데이터입이다. 따라서 string, number, bigint, boolean, symbol,undefined, null 총 7가지 타입이 이에 속하며 불변성을 띈다.</p>

<p>만약 우리가 a 라는 변수에 “123”이라는 값을 할당했을 경우 a라는 변수 위치에 값 “123”이 저장되는 것이 아니라 “123”이라는 값을 할당하기 위해 별도의 메모리 공간을 확보하여 저장하고 그 주소값을 a변수 영역에 저장하는 식으로 동작한다. 또한 a의 값을 “abc”로 재할당할 경우 별도의 공간에 “abc”를 저장하고 그 주소값을 a에 저장하는 식으로 변경이 이루어진다.</p>

<h2 id="reference-type">Reference type</h2>
<p>Reference type에는 객체(Object)가 있으며 이 객체에는 array, function, Date 등이 속해 있다. 때문에 typeof array가 ‘object’를 반환하는 것이다.</p>

<p>참조형데이터는 변수영역, 데이터영역과 별도의 객체의 변수(property)영역이 존재하는 것이 특징이다. 때문에 변수 영역에서는 데이터영역의 주소값이 저장되고 데이터영역에는 프로퍼티영역의 주소값이 저장된다. 따라서 변수에 다른 값을 얼마든지 대입할 수 있으며 복사를 할 때 얕은 복사가 이루어 지기 때문에 이에 주의하며 쓰거나 깊은 복사로 불변 객체를 만들어야한다.</p>

<h2 id="깊은-복사">깊은 복사</h2>
<p>깊은 복사에는 두가지 방법이 있다.</p>
<ol>
  <li>깊은 복사를 수행하는 함수를 이용</li>
  <li>JSON 문법으로 변환된 문자열로 변환했다가 JSON 객체로 변환</li>
</ol>

<p>1번의 경우 내부 프로퍼티들을 복사해야 하며 이 과정을 참조형 데이터가 있을 때마다 재귀적으로 수행해야 한다. 따라서 아래의 코드를 이용하게 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">copyObject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">target</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        	<span class="nx">result</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">copyObject</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
    	<span class="nx">result</span> <span class="o">=</span> <span class="nx">target</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2번의 경우는 1번보다 간단하지만 JSON으로 변경할 수 없는 프로퍼티들은 무시가 된다. 때문에 순수한 정보만 다룰 때 활용하기 좋은 방법이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">copyObject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">target</span><span class="p">));</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="차이점">차이점</h2>
<p>기본형 데이터와 참조형 데이터의 차이는 불변성과 가변성에 있다기 보다는 주소값을 복사하는 과정의 차이에 있다. 위에 설명과 같이 기본형은 주소값을 한번만 복사하고 참조형은 한단계를 더 거치기 때문이다.</p>]]></content><author><name>Dalaran</name></author><category term="javascript" /><category term="JavaScript" /><category term="연산자" /><category term="typeof" /><category term="Data type" /><category term="원시값" /><category term="Primitive type" /><category term="Reference type" /><summary type="html"><![CDATA[typeof을 이용해 데이터 타입에 대해 알아보자.]]></summary></entry><entry><title type="html">Custom Data Attributes</title><link href="http://localhost:4000/html/css/Custom-Data-Attributes/" rel="alternate" type="text/html" title="Custom Data Attributes" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/html/css/Custom%20Data%20Attributes</id><content type="html" xml:base="http://localhost:4000/html/css/Custom-Data-Attributes/"><![CDATA[<p>  최근 프로그래머스 과제 테스트에서 고양이 사진 검색 사이트 과제구현을 해보았다. 해당 과제의 내용중에는 다크모드 구현이 있는데 이 때 알게 된 것이 Custom Data Attributes(data-*)이다. 나는 이 기능을 이용하여 data-theme 이라는 속성을 생성하였으며 이를 감지하여 css가 변경되는 코드를 만들어 과제를 해결하였다.</p>

<h1 id="data-">data-*</h1>

<p>  MDN에 data-*은 이렇게 정의 되어 있다.</p>
<blockquote>
  <p>data-* 전역 특성은 사용자 지정 데이터 특성(custom data attributes)이라는 특성 클래스를 형성함으로써 임의의 데이터를 스크립트로 HTML과 DOM 사이에서 교환할 수 있는 방법입니다.</p>
</blockquote>

<p>element에 “data-“로 시작하는 속성을 주게 되면 해당 속성 안에 원하는 값을 저장할 수 있다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example"</span> <span class="na">data-theme=</span><span class="s">"dark"</span><span class="nt">&gt;</span>
    custom data attributes
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.example</span><span class="dl">"</span><span class="p">).</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">theme</span><span class="p">)</span>
    <span class="c1">// dark</span>
<span class="nt">&lt;/script&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 ‘data-theme’라는 커스텀 속성에 “dark”라는 값을 할당할 수 있는 것이다.
이처럼 커스텀 속성을 부여해 두면 dataset 프로퍼티를 이용하여 해당 속성에 접근할 수 있다.</p>

<p>만약 “data-hellow-world” 와 같이 여러 단어가 구성돼 있다면 dataset으로 접근 시 카멜케이스로 변경하여 접근해야 한다.<br />
ex) dataset.hellowWorld</p>

<h1 id="적용-코드">적용 코드</h1>
<p>먼저 js에서 $target (html의 &lt;div id="App"&gt;)을 잡은 후 theme라는 변수에 matchMedia를 통해 “dark” 혹은 “light”를 할당한 후 이를 setAttribute를 통해 $target에 속성값을 주었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="rouge-code"><pre><span class="c1">// App.js</span>
<span class="kd">class</span> <span class="nx">App</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="na">theme</span><span class="p">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="dl">"</span><span class="s2">(prefers-color-scheme: dark)</span><span class="dl">"</span><span class="p">).</span><span class="nx">matches</span>
      <span class="p">?</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span>
      <span class="p">:</span> <span class="dl">"</span><span class="s2">light</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">...</span>
  <span class="p">};</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">$target</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$target</span> <span class="o">=</span> <span class="nx">$target</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">changeTheme</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChangeTheme</span><span class="p">({</span>
      <span class="nx">$target</span><span class="p">,</span>
      <span class="na">theme</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">theme</span><span class="p">,</span>
      <span class="na">onClick</span><span class="p">:</span> <span class="p">(</span><span class="nx">nowTheme</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">nowTheme</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">theme</span><span class="p">:</span> <span class="dl">"</span><span class="s2">light</span><span class="dl">"</span> <span class="p">});</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">theme</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span> <span class="p">});</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">changeTheme</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
      <span class="p">},</span>
    <span class="p">});</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ChangeTheme.js</span>
<span class="kd">class</span> <span class="nx">ChangeTheme</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">({</span> <span class="nx">$target</span><span class="p">,</span> <span class="nx">theme</span><span class="p">,</span> <span class="nx">onClick</span> <span class="p">})</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$target</span> <span class="o">=</span> <span class="nx">$target</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="nx">theme</span><span class="p">;</span>
    <span class="nx">$target</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">data-theme</span><span class="dl">"</span><span class="p">,</span> <span class="nx">theme</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">$changeTheme</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span> <span class="o">=</span> <span class="nx">$changeTheme</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ChangeTheme</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">테마 변경</span><span class="dl">"</span><span class="p">;</span>
    
    <span class="nx">$target</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span><span class="p">);</span>

    <span class="nx">$changeTheme</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">onClick</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">setState</span><span class="p">(</span><span class="nx">nextData</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="nx">nextData</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$target</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">data-theme</span><span class="dl">"</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>버튼을 누르면 App에서 theme 값을 바꿔주며 setAttribute로 바뀐 값을 적용시켜 주고 있다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nd">:root</span> <span class="p">{</span>
  <span class="py">--font-color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
  <span class="py">--bg-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="py">--border-color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">[</span><span class="nt">data-theme</span><span class="o">=</span><span class="s1">"dark"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--font-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="py">--bg-color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
  <span class="py">--border-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이처럼 data-theme의 속성값을 변경해주면 css에서 이를 감지해 root에 선언된 변수값을 변하게 하였다. 테마에 따라 변경해줄 css에 해당 변수값을 적용시키면 간단한 다크모드를 만들 수 있다.</p>

<p>이상으로 결과화면과 함께 포스팅을 마치겠다.</p>

<p><img src="/assets//images/2022-04-25/%EB%8B%A4%ED%81%AC%EB%AA%A8%EB%93%9C.gif" alt="" /></p>]]></content><author><name>Dalaran</name></author><category term="html" /><category term="css" /><category term="data-*" /><category term="html" /><category term="css" /><summary type="html"><![CDATA[Custom Data Attributes에대해 알아보고 이를 이용한 간단한 다크모드를 구현해보자.]]></summary></entry></feed>