<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-04T06:10:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Log Archive</title><subtitle>개발관련 글을 기록하는 곳입니다.</subtitle><author><name>Dalaran</name></author><entry><title type="html">객체 지향 프로그래밍</title><link href="http://localhost:4000/javascript/oop/" rel="alternate" type="text/html" title="객체 지향 프로그래밍" /><published>2022-05-04T00:00:00+09:00</published><updated>2022-05-04T00:00:00+09:00</updated><id>http://localhost:4000/javascript/oop</id><content type="html" xml:base="http://localhost:4000/javascript/oop/"><![CDATA[<p>  흔히 JavaScript에 대해 설명하라 하면 자주 등장하는 단어가 객체 지향 언어이다. 이외에도 프로그래밍을 하다보면 객체 지향 프로그래밍이라는 단어를 종종 듣게된다. 이번 포스팅에서는 객체 지향 프로그래밍이 무엇인지, JavaScript가 왜 객체지향 언어라 할 수 있는지에 대해 정리해 보려한다.</p>

<p><br /></p>

<h2 id="객체지향-프로그래밍이란">객체지향 프로그래밍이란</h2>
<blockquote>
  <p>객체 지향 프로그래밍(영어: Object-Oriented Programming, OOP)은 컴퓨터 프로그래밍의 패러다임 중 하나이다. 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다. -위키백과-</p>
</blockquote>

<h2 id="oop가-나타난-배경">OOP가 나타난 배경</h2>
<p>초창기에 프로그래밍은 순차적이었다. 이러한 특성때문에 반복적 작업을 할 때 특정 범위의 코드를 다시 실행하기 힘들었으며 이를 위해 goto문을 만들게 된다. 때문에 절차적 프로그래밍이라는 방법이 나타나게 되지만 전역 변수의 형태로 만들다보니 스케일이 커질수록 변수에 같은 이름을 쓸 수 없는 문제점이 발행하게 된다. 이를 해결하기 위해 나타난 형태가 struct(구조체)이다.구초제를 이용하여 프로그래밍을 하다보니 특정 구조체를 동작하는 함수군들이 만들어지게 되었고 이를 함께 관리하기 위해 class가 만들어진다.</p>

<p><br /></p>

<h2 id="class">Class</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Character</span> <span class="o">{</span>
    <span class="nl">name:</span> <span class="s">"nunu"</span>
    <span class="nl">q:</span> <span class="s">"Biggest Snowball Ever!"</span>
    <span class="nl">w:</span> <span class="s">"Snowball Barrage"</span>
    <span class="nl">e:</span> <span class="s">"consume"</span>
    <span class="nl">r:</span> <span class="s">"Absolute Zero"</span>

    <span class="n">useSkill</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="n">let</span> <span class="n">chracter1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Character</span><span class="o">().</span>
<span class="n">character1</span><span class="o">.</span><span class="na">useSkill</span><span class="o">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이와같이 Class를 통해 데이터 처리 방식이 하나의 모듈로 관리되면서 작은 프로그램이 독립적으로 돌아가는 형태를 띄게 된다. 때문에 이와 같은 작은 부품을 미리 만들고 조합하는 형식으로 프로그래밍이 가능하게 되었다. 구조체와 함수를 합쳐서 선언하는 것을 ‘Class’,  Class를 통해 만들어진 결과물을 ‘Object’라 부르게 되었으며, 프로그래밍을 객체로 바라보는 관점으로 객체 지향 프로그래밍 (Object-Oriented Programming)이라는 단어가 나타났다.</p>

<h3 id="캡슐화privite">캡슐화(Privite)</h3>
<p>캡슐화는 독립된 객체를 사용하게되면서 외부로 노출해야 하는 값과 내부에서만 사용하는 값을 구분하는 기능이다. ‘privite’를 이용하여 외부에서 수정을 할 수 없게 하는 것으로 객체의 안정성을 높이고 필요한 메소드만 열어둠으로써 객체의 재사용성을 높일 수 있도록 하였다.</p>

<h3 id="상속extends-추상화-다양화">상속(extends), 추상화, 다양화</h3>
<p>상속은 객체의 일부분만 사용하는 방법으로 객체에서 공통적인 부분만 따로 만들고 해방 코드를 같이 상송받아 사용하는 방법이다. 이를 위해 공통적인 부분을 따로 모아 상위 개념으로 이름을 붙이는 추상화가 이루어 졌으며 여러가지 하위 타입에 참조할 수 있는 다향성이 생기게 되었다. 이 3개지 개념을 통해 객체의 일부분이 재사용가능하게 설계가 가능해진 것이다.</p>

<p><br /></p>

<h2 id="solid">SOLID</h2>
<p>이렇게 객체 지향 프로그래밍을 하다보니 규모가 점점 커지게 되었으며 이에따라 객체지향을 잘하기 위한 5원칙이 나오게되는데 이것이 SOLID이다.</p>

<h3 id="s-single-responsibility-principle">S (Single Responsibility Principle)</h3>
<blockquote>
  <p>단일 책임 원칙(single responsibility principle)이란 모든 클래스는 하나의 책임만 가지며, 클래스는 그 책임을 완전히 캡슐화해야 함을 일컫는다. -위키백과-</p>
</blockquote>

<h3 id="o-open-closed-principle">O (Open-Closed Principle)</h3>
<blockquote>
  <p>개방-폐쇄 원칙(Open-Closed Principle)은 ‘소프트웨어 개체(클래스, 모듈, 함수 등등)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다’는 프로그래밍 원칙이다. -위키백과-</p>
</blockquote>

<h3 id="l-liskov-substitution-principle">L (Liskov Substitution Principle)</h3>
<blockquote>
  <p>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다. -위키백과-</p>
</blockquote>

<h3 id="i-interface-segregation-principle">I (Interface Segregation Principle)</h3>
<blockquote>
  <p>인터페이스 분리 원칙, “특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.” -위키백과-</p>
</blockquote>

<h3 id="d-dependency-inversion-principle">D (Dependency Inversion Principle)</h3>
<blockquote>
  <p>의존관계 역전 원칙, 프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙을 따르는 방법 중 하나다. -위키백과-</p>
</blockquote>

<p><br /></p>

<h2 id="javascript">JavaScript</h2>
<p>자바스크립트는 기존의 객체 지향 프로그래밍이 복잡성을 피하기 위해 객체지향의 상속, 추상화, 다양화를 다른 방식으로 접근한 언어이다. 우리가 흔히 사용하는 자바스크립트의 객체가 이와 같은 케이스이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">character</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">nunu</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">q</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Biggest Snowball Ever!</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">w</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Snowball Barrage</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">e</span><span class="p">:</span> <span class="dl">"</span><span class="s2">consume</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">r</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Absolute Zero</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">useSkill</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>또한 new를 이용해 객체를 생성하던 방법을 function의 prototype을 이용하여 해결하였다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">character</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">skill</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">skill</span> <span class="o">=</span> <span class="nx">skill</span>
<span class="p">}</span>

<span class="nx">character</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">check</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="p">}</span>

<span class="kd">var</span> <span class="nx">nunu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">character</span><span class="p">(</span><span class="dl">"</span><span class="s2">누누</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Q</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">nunu</span><span class="p">.</span><span class="nx">check</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>이렇든 다양한 방법을 통해 자바스크립트는 기존의 객체 지향에서 복잡하게 구현해야 했던 패턴들을 간단하게 구현할 수 있게 하였다. 또한 객체 지향과 함수형을 적절하게 사용하는 방법으로 발전하게 되었다. (ES6의 Class 문법, TypeScript)</p>

<p>*ES6에서 추가된 class는 prototype 방식을 class처럼 보여주는 것이다.</p>]]></content><author><name>Dalaran</name></author><category term="javascript" /><category term="JavaScript" /><category term="OOP" /><category term="객체지향" /><summary type="html"><![CDATA[객체 지향 프로그래밍이 무엇이며 JavaScript가 객체지향인 이유가 뭘까?]]></summary></entry><entry><title type="html">typeof와 Data type</title><link href="http://localhost:4000/javascript/typeof/" rel="alternate" type="text/html" title="typeof와 Data type" /><published>2022-05-02T00:00:00+09:00</published><updated>2022-05-02T00:00:00+09:00</updated><id>http://localhost:4000/javascript/typeof</id><content type="html" xml:base="http://localhost:4000/javascript/typeof/"><![CDATA[<p>JavaScript에는 ‘typeof’라는 연산자가 있다. 이는 자료형을 문자열로 반환해주는 연산자로 코드를 만들 때 종종 사용하게 된다. 하지만 이 연산자를 쓸 때 가끔 생각과는 다른 결과가 종종 나오기도 한다. 이는 Data type과 연관이 있는데 어떠한 경우에 이런 현상이 나타나는지 왜 이런 현상이 발생하는지에 대해 포스팅 하려한다.</p>

<p><br /></p>

<h1 id="typeof">typeof</h1>
<blockquote>
  <p>typeof 연산자는 피연산자의 평가 전 자료형을 나타내는 문자열을 반환합니다.</p>
</blockquote>

<p>typeof 는 typeof operand 와 같은 형태로 사용된다. 이 때, operand란 자료형을 가져올 객체 또는 원시값을 나타내는 표현식을 뜻한다.</p>

<p><br /></p>

<h1 id="특이케이스">특이케이스</h1>

<h2 id="number">Number</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1">// Numbers</span>
<span class="k">typeof</span> <span class="mi">37</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">;</span>
<span class="k">typeof</span> <span class="mf">3.14</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">;</span>
<span class="k">typeof</span> <span class="kc">NaN</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">number</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>3.14와 같은 소수점이나 NaN 같은 타입을 보았을 때 혼동이올 수 있다. 하지만 type는 객체 또는 원시값이 기준이기 때문에 모두 number로 통일 된다.</p>

<h2 id="typeof-typeof-x">typeof (typeof x)</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c1">// Strings</span>
<span class="k">typeof</span> <span class="p">(</span><span class="k">typeof</span> <span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>typeof를 typeof 연산자로 확인하면 return 값 기준으로 연산이 된다 생각할 수 있다. 하지만 typeof를 typeof로 연산할 때는 항상 ‘string’이 리턴된다.</p>

<h2 id="null">null</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">typeof</span> <span class="kc">null</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>null은 얼핏보면 ‘undefined’라고 생각할 수 있다. 하지만 null은 ‘object’ 리턴한다. 이는 자바스크립트가 처음 구현될 때 자바스크립트 값이 타입태그와 값으로 표시된 것이 이유이다. 객체의 타입 태그는 0이었으며 null은 Null Point(대부분의 플랫폼에서 0x00)으로 표시되었다. 때문에 null 또한 타입 태그로 0을 가지며 typeof가 object를 반환하는 결과를 초래하게 되었다.</p>

<h2 id="object">Object</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">typeof</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">;</span>
<span class="k">typeof</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Date()는 내장 함수이기 때문에 object를 반환한다. array의 typeof는 ‘object’이며 array를 판별하기 위해서는 Array.isArray( )를 사용하거나 Object.prototype.toString.call( )을 사용해야 한다.</p>

<p><br /></p>

<h1 id="data-type">Data type</h1>
<p>array가 object를 반환하는 이유는 위에서 잠깐씩 설명했지만 이는 Data type과 큰 연관이 있다. Data type은 크게 Primitive type(기본/원시 타입)과 Reference type(참조 타입)으로 나뉘어진다. typeof 또한 반환값으로 위와 같은 타입으로 반환하기 때문에 이러한 현상이 발생하는 것이다. Primitive type과 Reference type에 대해 좀 더 알아보면 이해가 편해질 것이다.</p>

<h2 id="primitive-type">Primitive type</h2>
<p>Primitive type에 해당하는 값은 원시 값이 있다. JavaScript에서의 원시 값은 객체가 아니면서 메서드도 가지지 않는 데이터입이다. 따라서 string, number, bigint, boolean, symbol,undefined, null 총 7가지 타입이 이에 속하며 불변성을 띈다.</p>

<p>만약 우리가 a 라는 변수에 “123”이라는 값을 할당했을 경우 a라는 변수 위치에 값 “123”이 저장되는 것이 아니라 “123”이라는 값을 할당하기 위해 별도의 메모리 공간을 확보하여 저장하고 그 주소값을 a변수 영역에 저장하는 식으로 동작한다. 또한 a의 값을 “abc”로 재할당할 경우 별도의 공간에 “abc”를 저장하고 그 주소값을 a에 저장하는 식으로 변경이 이루어진다.</p>

<h2 id="reference-type">Reference type</h2>
<p>Reference type에는 객체(Object)가 있으며 이 객체에는 array, function, Date 등이 속해 있다. 때문에 typeof array가 ‘object’를 반환하는 것이다.</p>

<p>참조형데이터는 변수영역, 데이터영역과 별도의 객체의 변수(property)영역이 존재하는 것이 특징이다. 때문에 변수 영역에서는 데이터영역의 주소값이 저장되고 데이터영역에는 프로퍼티영역의 주소값이 저장된다. 따라서 변수에 다른 값을 얼마든지 대입할 수 있으며 복사를 할 때 얕은 복사가 이루어 지기 때문에 이에 주의하며 쓰거나 깊은 복사로 불변 객체를 만들어야한다.</p>

<h2 id="깊은-복사">깊은 복사</h2>
<p>깊은 복사에는 두가지 방법이 있다.</p>
<ol>
  <li>깊은 복사를 수행하는 함수를 이용</li>
  <li>JSON 문법으로 변환된 문자열로 변환했다가 JSON 객체로 변환</li>
</ol>

<p>1번의 경우 내부 프로퍼티들을 복사해야 하며 이 과정을 참조형 데이터가 있을 때마다 재귀적으로 수행해야 한다. 따라서 아래의 코드를 이용하게 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">copyObject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">target</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">target</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
        	<span class="nx">result</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">copyObject</span><span class="p">(</span><span class="nx">target</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
    	<span class="nx">result</span> <span class="o">=</span> <span class="nx">target</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>2번의 경우는 1번보다 간단하지만 JSON으로 변경할 수 없는 프로퍼티들은 무시가 된다. 때문에 순수한 정보만 다룰 때 활용하기 좋은 방법이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">copyObject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">target</span><span class="p">));</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="차이점">차이점</h2>
<p>기본형 데이터와 참조형 데이터의 차이는 불변성과 가변성에 있다기 보다는 주소값을 복사하는 과정의 차이에 있다. 위에 설명과 같이 기본형은 주소값을 한번만 복사하고 참조형은 한단계를 더 거치기 때문이다.</p>]]></content><author><name>Dalaran</name></author><category term="javascript" /><category term="JavaScript" /><category term="연산자" /><category term="typeof" /><category term="Data type" /><category term="원시값" /><category term="Primitive type" /><category term="Reference type" /><summary type="html"><![CDATA[typeof을 이용해 데이터 타입에 대해 알아보자.]]></summary></entry><entry><title type="html">Custom Data Attributes</title><link href="http://localhost:4000/css/Custom-Data-Attributes/" rel="alternate" type="text/html" title="Custom Data Attributes" /><published>2022-04-25T00:00:00+09:00</published><updated>2022-04-25T00:00:00+09:00</updated><id>http://localhost:4000/css/Custom%20Data%20Attributes</id><content type="html" xml:base="http://localhost:4000/css/Custom-Data-Attributes/"><![CDATA[<p>  최근 프로그래머스 과제 테스트에서 고양이 사진 검색 사이트 과제구현을 해보았다. 해당 과제의 내용중에는 다크모드 구현이 있는데 이 때 알게 된 것이 Custom Data Attributes(data-*)이다. 나는 이 기능을 이용하여 data-theme 이라는 속성을 생성하였으며 이를 감지하여 css가 변경되는 코드를 만들어 과제를 해결하였다.</p>

<h1 id="data-">data-*</h1>

<p>  MDN에 data-*은 이렇게 정의 되어 있다.</p>
<blockquote>
  <p>data-* 전역 특성은 사용자 지정 데이터 특성(custom data attributes)이라는 특성 클래스를 형성함으로써 임의의 데이터를 스크립트로 HTML과 DOM 사이에서 교환할 수 있는 방법입니다.</p>
</blockquote>

<p>element에 “data-“로 시작하는 속성을 주게 되면 해당 속성 안에 원하는 값을 저장할 수 있다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example"</span> <span class="na">data-theme=</span><span class="s">"dark"</span><span class="nt">&gt;</span>
    custom data attributes
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.example</span><span class="dl">"</span><span class="p">).</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">theme</span><span class="p">)</span>
    <span class="c1">// dark</span>
<span class="nt">&lt;/script&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 ‘data-theme’라는 커스텀 속성에 “dark”라는 값을 할당할 수 있는 것이다.
이처럼 커스텀 속성을 부여해 두면 dataset 프로퍼티를 이용하여 해당 속성에 접근할 수 있다.</p>

<p>만약 “data-hellow-world” 와 같이 여러 단어가 구성돼 있다면 dataset으로 접근 시 카멜케이스로 변경하여 접근해야 한다.<br />
ex) dataset.hellowWorld</p>

<h1 id="적용-코드">적용 코드</h1>
<p>먼저 js에서 $target (html의 &lt;div id="App"&gt;)을 잡은 후 theme라는 변수에 matchMedia를 통해 “dark” 혹은 “light”를 할당한 후 이를 setAttribute를 통해 $target에 속성값을 주었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
</pre></td><td class="rouge-code"><pre><span class="c1">// App.js</span>
<span class="kd">class</span> <span class="nx">App</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="na">theme</span><span class="p">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span><span class="dl">"</span><span class="s2">(prefers-color-scheme: dark)</span><span class="dl">"</span><span class="p">).</span><span class="nx">matches</span>
      <span class="p">?</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span>
      <span class="p">:</span> <span class="dl">"</span><span class="s2">light</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">...</span>
  <span class="p">};</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">$target</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$target</span> <span class="o">=</span> <span class="nx">$target</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">changeTheme</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChangeTheme</span><span class="p">({</span>
      <span class="nx">$target</span><span class="p">,</span>
      <span class="na">theme</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">theme</span><span class="p">,</span>
      <span class="na">onClick</span><span class="p">:</span> <span class="p">(</span><span class="nx">nowTheme</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">nowTheme</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">theme</span><span class="p">:</span> <span class="dl">"</span><span class="s2">light</span><span class="dl">"</span> <span class="p">});</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="na">theme</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span> <span class="p">});</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">changeTheme</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
      <span class="p">},</span>
    <span class="p">});</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ChangeTheme.js</span>
<span class="kd">class</span> <span class="nx">ChangeTheme</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">({</span> <span class="nx">$target</span><span class="p">,</span> <span class="nx">theme</span><span class="p">,</span> <span class="nx">onClick</span> <span class="p">})</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$target</span> <span class="o">=</span> <span class="nx">$target</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="nx">theme</span><span class="p">;</span>
    <span class="nx">$target</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">data-theme</span><span class="dl">"</span><span class="p">,</span> <span class="nx">theme</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">$changeTheme</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span> <span class="o">=</span> <span class="nx">$changeTheme</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ChangeTheme</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">테마 변경</span><span class="dl">"</span><span class="p">;</span>
    
    <span class="nx">$target</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$changeTheme</span><span class="p">);</span>

    <span class="nx">$changeTheme</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">onClick</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">setState</span><span class="p">(</span><span class="nx">nextData</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="nx">nextData</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$target</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">data-theme</span><span class="dl">"</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>버튼을 누르면 App에서 theme 값을 바꿔주며 setAttribute로 바뀐 값을 적용시켜 주고 있다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nd">:root</span> <span class="p">{</span>
  <span class="py">--font-color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
  <span class="py">--bg-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="py">--border-color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">[</span><span class="nt">data-theme</span><span class="o">=</span><span class="s1">"dark"</span><span class="o">]</span> <span class="p">{</span>
  <span class="py">--font-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="py">--bg-color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
  <span class="py">--border-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이처럼 data-theme의 속성값을 변경해주면 css에서 이를 감지해 root에 선언된 변수값을 변하게 하였다. 테마에 따라 변경해줄 css에 해당 변수값을 적용시키면 간단한 다크모드를 만들 수 있다.</p>

<p>이상으로 결과화면과 함께 포스팅을 마치겠다.</p>

<p><img src="/assets//images/2022-04-25/%EB%8B%A4%ED%81%AC%EB%AA%A8%EB%93%9C.gif" alt="" /></p>]]></content><author><name>Dalaran</name></author><category term="css" /><category term="data-*" /><category term="css" /><summary type="html"><![CDATA[Custom Data Attributes에대해 알아보고 이를 이용한 간단한 다크모드를 구현해보자.]]></summary></entry></feed>